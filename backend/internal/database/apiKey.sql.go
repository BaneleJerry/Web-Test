// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: apiKey.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteAPIKeyByID = `-- name: DeleteAPIKeyByID :exec
DELETE FROM api_keys WHERE id = $1
`

func (q *Queries) DeleteAPIKeyByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKeyByID, id)
	return err
}

const insertAPIKey = `-- name: InsertAPIKey :one
INSERT INTO api_keys (id, user_id, api_key_value, salt, expiration_time, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, api_key_value, salt, expiration_time, created_at
`

type InsertAPIKeyParams struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	ApiKeyValue    []byte
	Salt           []byte
	ExpirationTime time.Time
	CreatedAt      time.Time
}

func (q *Queries) InsertAPIKey(ctx context.Context, arg InsertAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, insertAPIKey,
		arg.ID,
		arg.UserID,
		arg.ApiKeyValue,
		arg.Salt,
		arg.ExpirationTime,
		arg.CreatedAt,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ApiKeyValue,
		&i.Salt,
		&i.ExpirationTime,
		&i.CreatedAt,
	)
	return i, err
}

const selectAPIKeysByUserID = `-- name: SelectAPIKeysByUserID :one
SELECT id, user_id, api_key_value, salt, expiration_time, created_at FROM api_keys WHERE user_id = $1
`

func (q *Queries) SelectAPIKeysByUserID(ctx context.Context, userID uuid.UUID) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, selectAPIKeysByUserID, userID)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ApiKeyValue,
		&i.Salt,
		&i.ExpirationTime,
		&i.CreatedAt,
	)
	return i, err
}

const updateAPIKeyExpirationTime = `-- name: UpdateAPIKeyExpirationTime :exec
UPDATE api_keys SET expiration_time = $2 WHERE id = $1
`

type UpdateAPIKeyExpirationTimeParams struct {
	ID             uuid.UUID
	ExpirationTime time.Time
}

func (q *Queries) UpdateAPIKeyExpirationTime(ctx context.Context, arg UpdateAPIKeyExpirationTimeParams) error {
	_, err := q.db.ExecContext(ctx, updateAPIKeyExpirationTime, arg.ID, arg.ExpirationTime)
	return err
}
